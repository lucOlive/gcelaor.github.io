<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gcelaor</title>
    <description>山豆先生</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 30 Oct 2016 21:53:11 +0800</pubDate>
    <lastBuildDate>Sun, 30 Oct 2016 21:53:11 +0800</lastBuildDate>
    <generator>Jekyll v3.3.0</generator>
    
      <item>
        <title>Chrome开发者工具</title>
        <description>&lt;p&gt;在Web开发者中，Google Chrome是使用最广泛的浏览器。六周一次的发布周期和一套强大的不断扩大开发功能，使其成为了web开发者必备的工具。你可能已经熟悉了它的部分功能，如使用console和debugger在线编辑CSS。在这篇文章中，我们将分享15个有助于改进你的开发流程的技巧。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;一、快速切换文件&lt;/h2&gt;

&lt;p&gt;如果你使用过sublime text，那么你可能不习惯没有Go to anything这个功能的覆盖。你会很高兴听到chrome开发者功能也有这个功能，当DevTools被打开的时候，按Ctrl+P（cmd+p on mac）,就能快速搜寻和打开你项目的文件。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://camo.githubusercontent.com/83097ccca29010988e821b03ef3a2cd93a3bb672/687474703a2f2f63646e2e7475746f7269616c7a696e652e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031352f30332f312e676966&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/83097ccca29010988e821b03ef3a2cd93a3bb672/687474703a2f2f63646e2e7475746f7269616c7a696e652e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031352f30332f312e676966&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;二、在源代码中搜索&lt;/h2&gt;

&lt;p&gt;如果你希望在源代码中搜索要怎么办呢？在页面已经加载的文件中搜寻一个特定的字符串，快捷键是Ctrl + Shift + F (Cmd + Opt + F)，这种搜寻方式还支持正则表达式哦&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://camo.githubusercontent.com/2f11c9efe247a8e182c123a8e31155d810e7ae16/687474703a2f2f63646e2e7475746f7269616c7a696e652e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031352f30332f322e536561726368416c6c2e676966&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/2f11c9efe247a8e182c123a8e31155d810e7ae16/687474703a2f2f63646e2e7475746f7269616c7a696e652e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031352f30332f322e536561726368416c6c2e676966&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;三、快速跳转到指定行&lt;/h2&gt;

&lt;p&gt;在Sources标签中打开一个文件之后，在Windows和Linux中，按Ctrl + G，(or Cmd + L for Mac)，然后输入行号，DevTools就会允许你跳转到文件中的任意一行。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://camo.githubusercontent.com/68971fc1ef924f23a9d2a51ec896a88936966de5/687474703a2f2f63646e2e7475746f7269616c7a696e652e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031352f30332f332e4a756d70546f4c696e652e676966&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/68971fc1ef924f23a9d2a51ec896a88936966de5/687474703a2f2f63646e2e7475746f7269616c7a696e652e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031352f30332f332e4a756d70546f4c696e652e676966&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;另外一种方式是按Ctrl + O，输入:和行数，而不用去寻找一个文件。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;四、在控制台选择元素&lt;/h2&gt;

&lt;p&gt;DevTools控制台支持一些变量和函数来选择DOM元素：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;$()–document.querySelector()的简写，返回第一个和css选择器匹配的元素。例如$(‘div’)返回这个页面中第一个div元素&lt;/li&gt;
  &lt;li&gt;$$()–document.querySelectorAll()的简写，返回一个和css选择器匹配的元素数组。&lt;/li&gt;
  &lt;li&gt;$0-$4–依次返回五个最近你在元素面板选择过的DOM元素的历史记录，$0是最新的记录，以此类推。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://camo.githubusercontent.com/405f204784a1a76d9f5e1c040f528668bcc5b41d/687474703a2f2f63646e2e7475746f7269616c7a696e652e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031352f30332f342e2e676966&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/405f204784a1a76d9f5e1c040f528668bcc5b41d/687474703a2f2f63646e2e7475746f7269616c7a696e652e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031352f30332f342e2e676966&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;想要了解更多控制台命令，戳这里：&lt;a href=&quot;https://developer.chrome.com/devtools/docs/commandline-api&quot;&gt;Command Line API&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;五、使用多个插入符进行选择&lt;/h2&gt;

&lt;p&gt;当编辑一个文件的时候，你可以按住Ctrl（cmd for mac），在你要编辑的地方点击鼠标，可以设置多个插入符，这样可以一次在多个地方编辑。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://camo.githubusercontent.com/f6d1344f7aaedae26d74caf4abf17e0ec971a6ba/687474703a2f2f63646e2e7475746f7269616c7a696e652e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031352f30332f352e4d756c7469706c6553656c656374436c69636b2e676966&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/f6d1344f7aaedae26d74caf4abf17e0ec971a6ba/687474703a2f2f63646e2e7475746f7269616c7a696e652e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031352f30332f352e4d756c7469706c6553656c656374436c69636b2e676966&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;六、保存记录&lt;/h2&gt;

&lt;p&gt;勾选在Console标签下的保存记录选项，你可以使DevTools的console继续保存记录而不会在每个页面加载之后清除记录。当你想要研究在页面还没加载完之前出现的bug时，这会是一个很方便的方法。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cloud.githubusercontent.com/assets/7871813/17443211/f43c7b90-5b6b-11e6-9f60-a4a77d6832fa.png&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/7871813/17443211/f43c7b90-5b6b-11e6-9f60-a4a77d6832fa.png&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;七、优质打印&lt;/h2&gt;

&lt;p&gt;Chrome’s Developer Tools有内建的美化代码，可以返回一段最小化且格式易读的代码。Pretty Print的按钮在Sources标签的左下角。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://camo.githubusercontent.com/04e10ac1d0136db6156a931721584b504914fdbf/687474703a2f2f63646e2e7475746f7269616c7a696e652e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031352f30332f372e5072657474795072696e742e676966&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/04e10ac1d0136db6156a931721584b504914fdbf/687474703a2f2f63646e2e7475746f7269616c7a696e652e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031352f30332f372e5072657474795072696e742e676966&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;八、设备模式&lt;/h2&gt;

&lt;p&gt;对于开发移动友好页面，DevTools包含了一个非常强大的模式，这个谷歌视频介绍了其主要特点，如调整屏幕大小、触摸仿真和模拟糟糕的网络连接。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cloud.githubusercontent.com/assets/7871813/17443058/2a7fe0ee-5b6b-11e6-8c2c-6ef54c0f5bf3.png&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/7871813/17443058/2a7fe0ee-5b6b-11e6-8c2c-6ef54c0f5bf3.png&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-8&quot;&gt;九、设备传感仿真&lt;/h2&gt;

&lt;p&gt;设备模式的另一个很酷的功能是模拟移动设备的传感器，例如触摸屏幕和加速计。你甚至可以恶搞你的地理位置。这个功能位于元素标签的底部，点击“show drawer”按钮，就可看见Emulation标签 –&amp;gt; Sensors.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://camo.githubusercontent.com/e71011048fb5cc068ac8dbd30537461eff8e83bb/687474703a2f2f63646e2e7475746f7269616c7a696e652e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031352f30332f392e53656e736f72732e676966&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/e71011048fb5cc068ac8dbd30537461eff8e83bb/687474703a2f2f63646e2e7475746f7269616c7a696e652e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031352f30332f392e53656e736f72732e676966&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-9&quot;&gt;十、颜色选择器&lt;/h2&gt;

&lt;p&gt;当在样式编辑中选择了一个颜色属性时，你可以点击颜色预览，就会弹出一个颜色选择器。当选择器开启时，如果你停留在页面，鼠标指针会变成一个放大镜，让你去选择像素精度的颜色。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://camo.githubusercontent.com/24425ceee9622c479f892f48151623ffa0a3d5b8/687474703a2f2f63646e2e7475746f7269616c7a696e652e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031352f30332f31302e436f6c6f725069636b65722e676966&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/24425ceee9622c479f892f48151623ffa0a3d5b8/687474703a2f2f63646e2e7475746f7269616c7a696e652e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031352f30332f31302e436f6c6f725069636b65722e676966&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-10&quot;&gt;十一、强制改变元素状态&lt;/h2&gt;

&lt;p&gt;DevTools有一个可以模拟CSS状态的功能，例如元素的hover和focus,可以很容易的改变元素样式。在CSS编辑器中可以利用这个功能&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://camo.githubusercontent.com/34498294a1fe9a9f60f353300a697dae3b36e1d0/687474703a2f2f63646e2e7475746f7269616c7a696e652e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031352f30332f31312e53696d756c617465486f7665722e676966&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/34498294a1fe9a9f60f353300a697dae3b36e1d0/687474703a2f2f63646e2e7475746f7269616c7a696e652e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031352f30332f31312e53696d756c617465486f7665722e676966&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;dom&quot;&gt;十二、可视化的DOM阴影&lt;/h2&gt;

&lt;p&gt;Web浏览器在构建如文本框、按钮和输入框一类元素时，其它基本元素的视图是隐藏的。不过，你可以在Settings -&amp;gt; General 中切换成Show user agent shadow DOM，这样就会在元素标签页中显示被隐藏的代码。甚至还能单独设计他们的样式，这给你了很大的控制权。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://camo.githubusercontent.com/c18547dd71fea11a3836598ada2943a3b215a8d6/687474703a2f2f63646e2e7475746f7269616c7a696e652e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031352f30332f31322e536861646f77444f4d2e676966&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/c18547dd71fea11a3836598ada2943a3b215a8d6/687474703a2f2f63646e2e7475746f7269616c7a696e652e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031352f30332f31322e536861646f77444f4d2e676966&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-11&quot;&gt;十三、选择下一个匹配项&lt;/h2&gt;

&lt;p&gt;当在Sources标签下编辑文件时，按下Ctrl + D (Cmd + D) ，当前选中的单词的下一个匹配也会被选中，有利于你同时对它们进行编辑。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://camo.githubusercontent.com/17358d90b613fd516a14927d9bd909e8338633d3/687474703a2f2f63646e2e7475746f7269616c7a696e652e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031352f30332f31332e4d756c746953656c6563742e676966&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/17358d90b613fd516a14927d9bd909e8338633d3/687474703a2f2f63646e2e7475746f7269616c7a696e652e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031352f30332f31332e4d756c746953656c6563742e676966&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-12&quot;&gt;十四、改变颜色格式&lt;/h2&gt;

&lt;p&gt;在颜色预览功能使用快捷键Shift + Click，可以在rgba、hsl和hexadecimal来回切换颜色的格式&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://camo.githubusercontent.com/fdcb27e7a5cc329e7727703c9f50259c20f68969/687474703a2f2f63646e2e7475746f7269616c7a696e652e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031352f30332f31342e436f6c6f72466f726d61742e676966&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/fdcb27e7a5cc329e7727703c9f50259c20f68969/687474703a2f2f63646e2e7475746f7269616c7a696e652e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031352f30332f31342e436f6c6f72466f726d61742e676966&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;workspaces-&quot;&gt;十五、通过workspaces来编辑本地 文件&lt;/h2&gt;

&lt;p&gt;Workspaces是Chrome DevTools的一个强大功能，这使DevTools变成了一个真正的IDE。Workspaces会将Sources选项卡中的文件和本地项目中的文件进行匹配，所以你可以直接编辑和保存，而不必复制/粘贴外部改变的文件到编辑器。&lt;/p&gt;

&lt;p&gt;为了配置Workspaces，只需打开Sources选项，然后右击左边面板的任何一个地方，选择Add Folder To Worskpace，或者只是把你的整个工程文件夹拖放入Developer Tool。现在，无论在哪一个文件夹，被选中的文件夹，包括其子目录和所有文件都可以被编辑。为了让Workspaces更高效，你可以将页面中用到的文件映射到相应的文件夹，允许在线编辑和简单的保存。&lt;/p&gt;

&lt;p&gt;了解更多关于Workspaces的使用，戳这里：&lt;a href=&quot;https://developer.chrome.com/devtools/docs/workspaces&quot;&gt;Workspaces&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-13&quot;&gt;参考&lt;/h2&gt;
</description>
        <pubDate>Wed, 19 Oct 2016 22:21:35 +0800</pubDate>
        <link>http://localhost:4000/2016/10/19/Chrome-Developer-Tool/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/10/19/Chrome-Developer-Tool/</guid>
        
        <category>译文</category>
        
        <category>Chrome开发者工具</category>
        
        
      </item>
    
      <item>
        <title>编写浏览器和Node.js通用的Javascript模块</title>
        <description>&lt;p&gt;长期以来JavaScript语言本身不提供模块化的支持， ES6中终于给出了&lt;code class=&quot;highlighter-rouge&quot;&gt;from&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;等关键字来进行模块化的代码组织。 但CommonJS、AMD等规范已经被广为使用，如果希望你的JavaScript同时支持浏览器和Node.js， 现在只有这几种方式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;通过&lt;a href=&quot;http://browserify.org/&quot;&gt;browserify&lt;/a&gt;等工具进行转换。&lt;/li&gt;
  &lt;li&gt;提供浏览器端CommonJS框架，比如这个&lt;a href=&quot;http://harttle.com/2016/04/25/commonjs.html&quot;&gt;简易的 CommonJS 实现&lt;/a&gt;。&lt;/li&gt;
  &lt;li&gt;通过小心的编码来支持多种环境。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://browserify.org/&quot;&gt;browserify&lt;/a&gt;几乎可以保证Node.js下测试通过的代码在浏览器中仍然能够正常使用。 但缺点也很显然：很容易产生冗余代码并生成一个巨大的JavaScript库。 对于微型的JavaScript工具，小心地编码再合适不过了！见下文。&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;避开全局的名称空间&lt;/h1&gt;

&lt;p&gt;CommonJS中，每个源文件中的局部变量在其他文件中不可见。 然而浏览器中，所有全局名称空间的变量对所有JavaScript文件都可见。 这意味着我们需要包装所有的代码。例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(function(){
    // your code goes here...
})();

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;不同于常见编程语言，JavaScript采取&lt;a href=&quot;http://harttle.com/2016/02/05/js-scope.html&quot;&gt;函数作用域&lt;/a&gt;， 用一个&lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;来包裹你的代码可以隐藏里面的局部变量。&lt;/p&gt;

&lt;p&gt;如果你对整个文件都被缩进的代码很反感，可以在构建时再添加上述代码。例如Makefile中：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;person.js: index.js
    echo '(function(){' &amp;gt; $@
    cat $^ &amp;gt;&amp;gt; $@
    echo '})();' &amp;gt;&amp;gt; $@

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;section-1&quot;&gt;一个简单的类&lt;/h1&gt;

&lt;p&gt;当然，『类』指的就是一个函数。假设我们的JavaScript模块提供一个叫做&lt;code class=&quot;highlighter-rouge&quot;&gt;Person&lt;/code&gt;的类：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(function(){
    function Person(){
        this.name = 'harttle';
    }
})();

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;下文将会考虑如何将这个类提供给其他模块使用。&lt;/p&gt;

&lt;h1 id=&quot;commonjs&quot;&gt;检测CommonJS环境&lt;/h1&gt;

&lt;p&gt;要使用&lt;code class=&quot;highlighter-rouge&quot;&gt;typeof&lt;/code&gt;来检测一个变量是否曾被声明，因为&lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;对于未声明的变量会抛出错误。 例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Uncaught ReferenceError: foo is not defined
if(foo == undefined){       
    console.log('foo does not exist');
}
// 正常运行
if(typeof foo == 'undefined'){
    console.log('foo does not exist');
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;检测CommonJS我们只需要检测&lt;code class=&quot;highlighter-rouge&quot;&gt;module&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;exports&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt;是否存在，比如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// CommonJS
if (typeof module !== 'undefined' &amp;amp;&amp;amp; typeof module.exports !== 'undefined') {
    module.exports = Person;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;section-2&quot;&gt;检测浏览器环境&lt;/h1&gt;

&lt;p&gt;浏览器环境也包括引入了AMD框架的，以及没有做模块化的。 对于前者我们应当使用AMD框架来声明一个模块，而对于后者我们只需要暴露一个全局变量。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Browser
if (typeof define === 'function' &amp;amp;&amp;amp; define.amd) {
    define('Person', [], function() {
        return Person;
    });
} else {
    window.Person = Person;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;当然这些浏览器检测相关逻辑也应当一并包裹在&lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;中。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Wed, 19 Oct 2016 04:21:35 +0800</pubDate>
        <link>http://localhost:4000/2016/10/19/Write-browser-and-Node.js-generic-Javascript-modules.md/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/10/19/Write-browser-and-Node.js-generic-Javascript-modules.md/</guid>
        
        <category>AMD</category>
        
        <category>CommonJS</category>
        
        <category>Browser</category>
        
        <category>Node.js</category>
        
        
      </item>
    
      <item>
        <title>Git:时光机</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;提交记录&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：希望查看仓库的中所有提交的信息，比如提交人、提交时间、代码增删、Commit ID等。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;：通过&lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt;可查询这些信息。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 查看Git提交的元信息
git log
# 查看Git提交，以及对应的代码增删
git log -p
# 查看app.js的Git提交日志
git log -p app.js

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;git-blame&quot;&gt;Git Blame&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：查看每一行代码的最后改动时间，以及提交人。例如，追溯&lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt;文件中某一行是被谁改坏的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;：通过&lt;code class=&quot;highlighter-rouge&quot;&gt;git blame&lt;/code&gt;来查询。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git blame app.js

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;更多参数请查询&lt;code class=&quot;highlighter-rouge&quot;&gt;git blame --help&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-1&quot;&gt;检出历史版本&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：希望将当前项目回到某个历史版本。例如：希望从某个历史版本建立分支时。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;：&lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 检出到某个commit，可通过git log得到Commit ID
git checkout 5304f1bd...b4d4
# 检出到某个分支或Tag
git checkout gh-pages

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;原则上讲Git历史是不允许更改的，这方面Git很像 &lt;a href=&quot;http://harttle.com/2014/01/03/morden-os-fs.html&quot;&gt;日志结构的文件系统&lt;/a&gt;（Log-Structured File Systems）。 但也有办法可以更改日志，例如：&lt;a href=&quot;http://harttle.com/2016/03/22/purge-large-files-in-gitrepo.html&quot;&gt;寻找并删除Git记录中的大文件&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 13 Oct 2016 19:20:15 +0800</pubDate>
        <link>http://localhost:4000/2016/10/13/Git-Time-Machine/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/10/13/Git-Time-Machine/</guid>
        
        <category>Git</category>
        
        <category>Github</category>
        
        
      </item>
    
      <item>
        <title>Git学习—远程仓库</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;显示远程仓库&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：需要查看远程仓库地址（比如想把它拷贝给别人）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;：使用&lt;code class=&quot;highlighter-rouge&quot;&gt;git remote&lt;/code&gt;相关命令。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 查看所有远程仓库
git remote -v
# 查看一个远程仓库（比如origin）的详细信息（包括Fetch、Push地址）
git remote show origin
# -n 参数禁止联系远程仓库，可大大加快速度
git remote show origin -n

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-1&quot;&gt;管理远程仓库&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：需要添加、更改或删除远程仓库时。例如远程仓库从Github迁移到Coding.net时需要更改远程仓库URL（不需重新clone）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;：使用&lt;code class=&quot;highlighter-rouge&quot;&gt;git remote&lt;/code&gt;系列命令操作。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 添加远程仓库bar.git并命名为bar
git remote add bar bar.git
# 更改远程仓库URL
git remote set-url origin new.xxx.git

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;更多命令请查询&lt;code class=&quot;highlighter-rouge&quot;&gt;git remote --help&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-2&quot;&gt;同步远程仓库&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：将远程仓库同步到本地，或将本地仓库同步到远程。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;：使用&lt;code class=&quot;highlighter-rouge&quot;&gt;git fetch&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt;系列命令。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;文档&lt;/strong&gt;：&lt;a href=&quot;https://git-scm.com/docs/git-push&quot;&gt;https://git-scm.com/docs/git-push&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 同步默认的remote仓库（通常叫origin）到本地
# 工作区文件并不会发生改变，只同步仓库内容，即`.git/`目录
git fetch
# 同步所有remote仓库到本地
git fetch --all

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-3&quot;&gt;多个远程仓库&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：一个本地仓库需要与多个远程仓库同步，或需要merge其他远程仓库时。 例如Github Pages博客同时Push到Github和Coding.net。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;：逐个添加远程仓库到&lt;code class=&quot;highlighter-rouge&quot;&gt;remote&lt;/code&gt;，逐一Push。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 将coding仓库添加到remote
git remote add coding git@coding.net:bar.git
# 将master分支Push到origin的master分支
git push origin master
# 将master分支Push到coding的coding-pages分支
git push coding master:coding-pages

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;checkout&quot;&gt;checkout一个远程分支&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：现有一个本地仓库不存在的远程分支，希望让当前工作区进入这个分支。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;：可以先同步本地仓库，再切换到该分支。也可以先切换到该分支再同步远程代码。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 方法一：同步本地仓库
git fetch
# 切换到远程分支
git checkout feature-x

# 方法二：切换到新的分支
git checkout -b feature-x
git branch --set-upstream-to=remote/feature-x
# 等效于
git branch -u remote/feature-x
git pull

# 方法三：先创建分支以及track关系，再切换分支
git branch feature-x
git branch -u remote/feature-x feature-x
git checkout feature-x
git pull

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-4&quot;&gt;删除远程分支&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：不小心把一个分支名Push上去了，需要在远程删除一个分支。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;：直接push，添加–delete参数即可。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;文档&lt;/strong&gt;：&lt;a href=&quot;https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF&quot;&gt;https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 删除远程origin上的serverfix分支
git push origin --delete serverfix

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;tag&quot;&gt;删除远程Tag&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：Tag命名错误，或者需要统一命名风格。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;：在本地删除Tag，然后Push到服务器。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git tag -d some-tag
git push origin :refs/tags/some-tags
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 12 Oct 2016 18:49:15 +0800</pubDate>
        <link>http://localhost:4000/2016/10/12/Learn-Git-Remote/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/10/12/Learn-Git-Remote/</guid>
        
        <category>Git</category>
        
        <category>Github</category>
        
        
      </item>
    
      <item>
        <title>Git学习:提交代码</title>
        <description>&lt;p&gt; 本文以实际的案例，总结了Git代码提交相关的操作步骤以及涉及到的Git命令。主要包括：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt;命令将工作区内容添加到暂存区， &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt;命令将暂存区内容提交到本地仓库。 添加&lt;code class=&quot;highlighter-rouge&quot;&gt;-m&lt;/code&gt;参数可直接用指定的message提交本次commit。 否则Vim会打开默认的文本编辑器提示你输入commit message。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;将改动添加到暂存区&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：在提交前需要选择提交的文件（到暂存区），否则git会提示没有要提交的东西。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;：使用&lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt;命令即可将某个文件（的修改）添加到暂存区。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;文档&lt;/strong&gt;：&lt;a href=&quot;https://git-scm.com/docs/git-add&quot;&gt;https://git-scm.com/docs/git-add&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 添加README.md到暂存区
git add README.md
# 添加当前目录所有文件到暂存区
git add .
# 强制添加，忽略.gitignore配置
git add node_modules/ --force

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt;会忽略列在&lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt;中的文件/目录。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-1&quot;&gt;提交对仓库中文件的改动&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：希望只提交仓库中既有文件的改动，而不想&lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt;其他的文件（仓库外）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;：省略&lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt;命令，然后以&lt;code class=&quot;highlighter-rouge&quot;&gt;-a&lt;/code&gt;参数运行&lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git commit -a

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;可通过&lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt;来查看当前的改动情况，以及本地与远程的同步情况。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;add&quot;&gt;撤销Add&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：不小心添加了文件到暂存区，现在需要撤销所有的&lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;：使用&lt;code class=&quot;highlighter-rouge&quot;&gt;get reset&lt;/code&gt;，重置暂存区到HEAD。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 取消Add某一个文件
git reset path/to/file
# 取消所有Add的文件（将会使得所有改动变成not staged或untracked）
git reset

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;commit&quot;&gt;撤销上次Commit&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：发现上次&lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;信息有误，或不小心&lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;了不合适的文件， 希望能撤销&lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;而文件不受改动。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;：使用Git的『软』（不改动文件）重置。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git reset --soft HEAD^

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD^&lt;/code&gt;回到表示重置到当前状态的前一个&lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;commit-1&quot;&gt;修改上次Commit&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：漏掉了某个文件，或者写错了Commit信息，希望能够补充一下而不是撤销再重新Commit。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;：使用&lt;code class=&quot;highlighter-rouge&quot;&gt;--amend&lt;/code&gt;参数即可修改上次Commit。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;文档&lt;/strong&gt;：&lt;a href=&quot;https://git-scm.com/book/zh/v1/Git-%E5%9F%BA%E7%A1%80-%E6%92%A4%E6%B6%88%E6%93%8D%E4%BD%9C&quot;&gt;https://git-scm.com/book/zh/v1/Git-%E5%9F%BA%E7%A1%80-%E6%92%A4%E6%B6%88%E6%93%8D%E4%BD%9C&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 下面三条命令只产生一个Commit
git commit -m 'initial commit'
git add forgotten_file  # 添加漏掉的文件
git commit --amend      # 补充Commit信息

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-2&quot;&gt;撤销工作区所有改动&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：希望撤销所有工作区的改动，回到最后一次commit的状态。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;：&lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;git reset&lt;/code&gt;都可达到目的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;文档&lt;/strong&gt;：&lt;a href=&quot;https://git-scm.com/docs/git-reset&quot;&gt;https://git-scm.com/docs/git-reset&lt;/a&gt;, &lt;a href=&quot;https://git-scm.com/docs/git-checkout&quot;&gt;https://git-scm.com/docs/git-checkout&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 重置工作区的所有改动
git reset --hard
# 该命令可以指定当前目录，还是某个文件
git checkout .

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-3&quot;&gt;空提交&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：只想产生一个commit而不想改动文件。比如需要push一个commit以触发重新部署的Git Hook时。 &lt;strong&gt;步骤&lt;/strong&gt;：使用&lt;code class=&quot;highlighter-rouge&quot;&gt;--allow-empty&lt;/code&gt;参数来提交。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git commit --allow-empty -m 'empty commit'

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-4&quot;&gt;将文件从仓库中移除&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：不小心把不应提交到仓库的文件（比如临时文件，大文件，配置文件等）提交了进去，现在希望将其删除。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;：使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;git rm&lt;/code&gt; 命令。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 从仓库和工作区都删除它（例如临时文件）
git rm .*.swp
# 只从仓库中删除，工作区中保留（例如配置文件）
git rm --cached config.yml

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果希望从仓库历史中也删除（例如大文件），那么需要使用&lt;code class=&quot;highlighter-rouge&quot;&gt;git filter-branch&lt;/code&gt;系列命令。 请参考&lt;a href=&quot;http://harttle.com/2016/03/22/purge-large-files-in-gitrepo.html&quot;&gt;寻找并删除Git记录中的大文件&lt;/a&gt;一文。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git rm&lt;/code&gt;和bash &lt;code class=&quot;highlighter-rouge&quot;&gt;rm&lt;/code&gt;的参数类似，基本可通用。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Wed, 12 Oct 2016 17:30:15 +0800</pubDate>
        <link>http://localhost:4000/2016/10/12/Learn-Git-Submit-Code/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/10/12/Learn-Git-Submit-Code/</guid>
        
        <category>Git</category>
        
        <category>Github</category>
        
        
      </item>
    
      <item>
        <title>Git:提交代码</title>
        <description>&lt;p&gt; 本文以实际的案例，总结了Git代码提交相关的操作步骤以及涉及到的Git命令。主要包括：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt;命令将工作区内容添加到暂存区， &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt;命令将暂存区内容提交到本地仓库。 添加&lt;code class=&quot;highlighter-rouge&quot;&gt;-m&lt;/code&gt;参数可直接用指定的message提交本次commit。 否则Vim会打开默认的文本编辑器提示你输入commit message。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;将改动添加到暂存区&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：在提交前需要选择提交的文件（到暂存区），否则git会提示没有要提交的东西。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;：使用&lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt;命令即可将某个文件（的修改）添加到暂存区。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;文档&lt;/strong&gt;：&lt;a href=&quot;https://git-scm.com/docs/git-add&quot;&gt;https://git-scm.com/docs/git-add&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 添加README.md到暂存区
git add README.md
# 添加当前目录所有文件到暂存区
git add .
# 强制添加，忽略.gitignore配置
git add node_modules/ --force

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt;会忽略列在&lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt;中的文件/目录。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-1&quot;&gt;提交对仓库中文件的改动&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：希望只提交仓库中既有文件的改动，而不想&lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt;其他的文件（仓库外）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;：省略&lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt;命令，然后以&lt;code class=&quot;highlighter-rouge&quot;&gt;-a&lt;/code&gt;参数运行&lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git commit -a

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;可通过&lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt;来查看当前的改动情况，以及本地与远程的同步情况。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;add&quot;&gt;撤销Add&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：不小心添加了文件到暂存区，现在需要撤销所有的&lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;：使用&lt;code class=&quot;highlighter-rouge&quot;&gt;get reset&lt;/code&gt;，重置暂存区到HEAD。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 取消Add某一个文件
git reset path/to/file
# 取消所有Add的文件（将会使得所有改动变成not staged或untracked）
git reset

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;commit&quot;&gt;撤销上次Commit&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：发现上次&lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;信息有误，或不小心&lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;了不合适的文件， 希望能撤销&lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;而文件不受改动。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;：使用Git的『软』（不改动文件）重置。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git reset --soft HEAD^

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD^&lt;/code&gt;回到表示重置到当前状态的前一个&lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;commit-1&quot;&gt;修改上次Commit&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：漏掉了某个文件，或者写错了Commit信息，希望能够补充一下而不是撤销再重新Commit。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;：使用&lt;code class=&quot;highlighter-rouge&quot;&gt;--amend&lt;/code&gt;参数即可修改上次Commit。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;文档&lt;/strong&gt;：&lt;a href=&quot;https://git-scm.com/book/zh/v1/Git-%E5%9F%BA%E7%A1%80-%E6%92%A4%E6%B6%88%E6%93%8D%E4%BD%9C&quot;&gt;https://git-scm.com/book/zh/v1/Git-%E5%9F%BA%E7%A1%80-%E6%92%A4%E6%B6%88%E6%93%8D%E4%BD%9C&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 下面三条命令只产生一个Commit
git commit -m 'initial commit'
git add forgotten_file  # 添加漏掉的文件
git commit --amend      # 补充Commit信息

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-2&quot;&gt;撤销工作区所有改动&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：希望撤销所有工作区的改动，回到最后一次commit的状态。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;：&lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;git reset&lt;/code&gt;都可达到目的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;文档&lt;/strong&gt;：&lt;a href=&quot;https://git-scm.com/docs/git-reset&quot;&gt;https://git-scm.com/docs/git-reset&lt;/a&gt;, &lt;a href=&quot;https://git-scm.com/docs/git-checkout&quot;&gt;https://git-scm.com/docs/git-checkout&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 重置工作区的所有改动
git reset --hard
# 该命令可以指定当前目录，还是某个文件
git checkout .

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-3&quot;&gt;空提交&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：只想产生一个commit而不想改动文件。比如需要push一个commit以触发重新部署的Git Hook时。 &lt;strong&gt;步骤&lt;/strong&gt;：使用&lt;code class=&quot;highlighter-rouge&quot;&gt;--allow-empty&lt;/code&gt;参数来提交。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git commit --allow-empty -m 'empty commit'

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-4&quot;&gt;将文件从仓库中移除&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：不小心把不应提交到仓库的文件（比如临时文件，大文件，配置文件等）提交了进去，现在希望将其删除。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;：使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;git rm&lt;/code&gt; 命令。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 从仓库和工作区都删除它（例如临时文件）
git rm .*.swp
# 只从仓库中删除，工作区中保留（例如配置文件）
git rm --cached config.yml

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果希望从仓库历史中也删除（例如大文件），那么需要使用&lt;code class=&quot;highlighter-rouge&quot;&gt;git filter-branch&lt;/code&gt;系列命令。 请参考&lt;a href=&quot;http://harttle.com/2016/03/22/purge-large-files-in-gitrepo.html&quot;&gt;寻找并删除Git记录中的大文件&lt;/a&gt;一文。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git rm&lt;/code&gt;和bash &lt;code class=&quot;highlighter-rouge&quot;&gt;rm&lt;/code&gt;的参数类似，基本可通用。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Wed, 12 Oct 2016 17:30:15 +0800</pubDate>
        <link>http://localhost:4000/2016/10/12/Git-Submit-Code/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/10/12/Git-Submit-Code/</guid>
        
        <category>Git</category>
        
        
      </item>
    
      <item>
        <title>Git学习:初始化</title>
        <description>&lt;p&gt;​     本例子：”gcelaor”为我的GitHub用户名，”gcelaor.github.io”是我GitHub上的仓库。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;从既有远程仓库建立&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：加入一个项目，或创建一个项目副本。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;：远程仓库已经存在的情况下，直接克隆即可得到一个仓库副本。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone git@github.com:gcelao/gcelaor.github.io
$ cd gcelaor.github.io
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-1&quot;&gt;从空的远程仓库建立&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：初始化一个远程仓库，例如建立一个Github仓库后。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;：新建目录并将其初始化为Git仓库，然后添加远程仓库到&lt;code class=&quot;highlighter-rouge&quot;&gt;remote&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir bar &amp;amp;&amp;amp; cd bar
git init --bare
git remote add origin git@foo.com:bar.git
touch README.md
git add README.md &amp;amp;&amp;amp; git commit -m 'init'
# 初次Push需指定远程分支
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 11 Oct 2016 15:40:35 +0800</pubDate>
        <link>http://localhost:4000/2016/10/11/Learn-Git-Initialization/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/10/11/Learn-Git-Initialization/</guid>
        
        <category>Git</category>
        
        <category>Github</category>
        
        
      </item>
    
  </channel>
</rss>
